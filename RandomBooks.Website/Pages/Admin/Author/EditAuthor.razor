@page "/admin/author"
@page "/admin/author/{id:int}"
@layout Shared.Layouts.AdminLayout
@attribute [Authorize(Roles = "Admin")]
@inject IAuthorService AuthorService
@inject NavigationManager NavigationManager

@if (loading)
{
    <div style="text-align: center;">
        <h2>@message</h2>
    </div>
}
else
{
    if (author.Editing)
    {
        <h3>Edit author</h3>
    }
    else if (author.New)
    {
        <h3>Create new author</h3>
    }
    <br />

    <EditForm Model="author" OnValidSubmit="AddOrUpdateAuthor">
        <DataAnnotationsValidator />
        <div class="row mb-2">
            <div class="col-3 col-md-4 col-lg-3">
                <img src="@image" style="border-radius: 100px;"/>
                <div class="mt-5">
                    <label for="image">Change Image</label>
                    <InputFile id="image" class="form-control" OnChange="OnFileChange"></InputFile>
                </div>
            </div>
            <div class="col ms-5">
                <div class="col-5 col-md-7 col-lg-5 col-xl-5 col-xxl-4 mb-3">
                    <label for="name">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="author.Name"></InputText>
                </div>
                <div class="col">
                    <label for="description">Description</label>
                    <textarea id="description" class="form-control" @bind="author.Description" style="height: 188px;"></textarea>
                </div>
            </div>
        </div>
        @if (!author.New)
        {
            <div class="ms-2 mb-4">
                <label for="deleted" class="form-check-label me-2">Deleted</label>
                <InputCheckbox id="deleted" @bind-Value="author.Deleted" class="form-check-input"></InputCheckbox>
            </div>
        }
        <div class="row">
            <button type="button" class="btn bg-black text-white col me-5" @onclick="Cancel">Go back</button>
            <button class="btn btn-success col">Save</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    Author author = new();
    bool loading = true;
    string buttonText = string.Empty;
    string message = "Loading author...";
    string image = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            author = new Author { New = true };
            buttonText = "Create Author";
            image = "user.svg";
        }
        else
        {
            var dbAuthor = (await AuthorService.GetAuthor(Id)).Data;
            if (dbAuthor == null)
            {
                message = $"Author with Id '{Id}' does not exist!";
                return;
            }

            author = dbAuthor;
            author.Editing = true;
            buttonText = "Update Author";

            if (author.Image is null)
                image = "user.svg";
            else image = author.Image.Data;
        }

        loading = false;
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        image = imageData;
    }

    async void Cancel() => NavigationManager.NavigateTo("admin/authors");

    async void AddOrUpdateAuthor()
    {
        if (author.New)
        {
            var result = await AuthorService.AddAuthor(author, image == "user.svg" ? string.Empty : image);
            NavigationManager.NavigateTo($"admin/author/{result.Id}");
        }
        else
        {
            author.New = false;
            author = await AuthorService.UpdateAuthor(author, image == "user.svg" ? string.Empty : image);
            NavigationManager.NavigateTo($"admin/authors");
        }
    }
}
