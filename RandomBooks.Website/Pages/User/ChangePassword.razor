@page "/change-password"
@attribute [Authorize]
@inject IAuthService AuthService
@inject ICartService CartService
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<center><h3>Change Password</h3></center>

<div class="form">
    <EditForm Model="request" OnValidSubmit="SendRequest">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-3">
            <label for="password">New Password</label>
            <InputText id="password" @bind-Value="request.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => request.Password)" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword">Confirm New Password</label>
            <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => request.ConfirmPassword)" />
        </div>
        <div class="d-flex">
            <button type="button" class="btn bg-black text-white me-auto" 
                    @onclick="Cancel">
                Cancel
            </button>
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </EditForm>
</div>

@code {
    UserChangePassword request = new UserChangePassword();

    private void Cancel() => NavigationManager.NavigateTo("profile");

    private async Task SendRequest()
    {
        var result = await AuthService.ChangePassword(request);
        if (!result.Success)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Something went wrong\n{result.Message}");
            return;
        }
        
        await LocalStorage.RemoveItemAsync("token");
        await CartService.GetNumberOfItems();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}
